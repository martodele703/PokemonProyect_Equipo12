<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Poke.Clases.Attack">
            <summary>
            Representa un ataque que un Pokémon puede utilizar en combate.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Name">
            <summary>
            Obtiene o establece el nombre del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Damage">
            <summary>
            Obtiene o establece el valor de daño base del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.AttackType">
            <summary>
            Obtiene o establece el tipo del ataque (e.g., Fuego, Agua, etc.).
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.IsSpecial">
            <summary>
            Indica si el ataque es especial (en lugar de físico).
            </summary>
        </member>
        <member name="M:Poke.Clases.Attack.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Attack"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Attack.CalculateDamage(Poke.Clases.Pokemon)">
            <summary>
            Calcula el daño final del ataque basado en la efectividad del tipo contra el tipo del objetivo.
            </summary>
            <param name="target">El Pokémon objetivo que recibe el ataque.</param>
            <returns>El daño final después de aplicar la ventaja o desventaja de tipo.</returns>
        </member>
        <member name="M:Poke.Clases.NormalAttack.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
             Constructor para inicializar un ataque
             </summary>
        </member>
        <member name="T:Poke.Clases.Battle">
            <summary>
            Representa una batalla entre dos entrenadores Pokémon, gestionando turnos, jugadas, y verificando el final del juego.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.AleatoryTurn">
            <summary>
            Determina el turno inicial de forma aleatoria entre los dos jugadores.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.plays">
            <summary>
            Instancia para gestionar las jugadas posibles en cada turno.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.Turn">
            <summary>
            Representa el turno actual en la batalla, alternando entre los jugadores.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.PlayerPokemon">
            <summary>
            Pokemon del jugador principal.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.OpponentPokemon">
            <summary>
            Pokemon del oponente.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.ActualTurn">
            <summary>
            Contador del turno actual.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.#ctor(Poke.Clases.Pokemon,Poke.Clases.Pokemon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Battle"/>.
            </summary>
            <param name="playerPokemon">El entrenador principal del jugador.</param>
            <param name="opponentPokemon">El entrenador oponente.</param>
        </member>
        <member name="M:Poke.Clases.Battle.InitialTurn">
            <summary>
            Determina de forma aleatoria cuál jugador comienza el primer turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.PlayTurn(Poke.Clases.Trainer,Poke.Clases.Trainer)">
            <summary>
            Ejecuta un turno de la batalla, permitiendo a un jugador realizar una jugada y luego alterna el turno al otro jugador.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.GameFinished(Poke.Clases.Trainer,Poke.Clases.Trainer)">
            <summary>
            Verifica si la batalla ha terminado, es decir, si uno de los jugadores ha ganado.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
            <returns>True si uno de los jugadores ha ganado; de lo contrario, False.</returns>
        </member>
        <member name="M:Poke.Clases.Battle.InfoTurn(Poke.Clases.Trainer,Poke.Clases.Trainer)">
            <summary>
            Muestra el estado actual de los Pokémon de ambos jugadores, incluyendo el turno actual.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.Game(Poke.Clases.Trainer,Poke.Clases.Trainer)">
            <summary>
            Ejecuta la batalla completa entre dos jugadores, alternando turnos hasta que uno de los jugadores gane.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="T:Poke.Clases.Plays">
            <summary>
            Clase que gestiona las posibles jugadas de un entrenador durante un turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Plays.PossiblePlays(Poke.Clases.Trainer,Poke.Clases.Trainer,Poke.Clases.Items,Poke.Clases.Pokemon)">
            <summary>
            Permite al entrenador elegir entre atacar, cambiar de Pokémon o usar un ítem.
            </summary>
            <param name="player1">El entrenador que realiza la jugada.</param>
            <param name="player2">El entrenador oponente.</param>
            <param name="item">El ítem que el jugador puede usar.</param>
            <param name="objective">El Pokémon objetivo del ítem.</param>
        </member>
        <member name="T:Poke.Clases.Pokemon">
            <summary>
            Representa un Pokémon con sus atributos y capacidades de ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Name">
            <summary>Nombre del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackCapacity">
            <summary>Capacidad de ataque del Pokémon, inicialmente en 1 si puede atacar.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.State">
            <summary>Estado actual del Pokémon (dormido, paralizado, etc.), nulo si no tiene estado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Hp">
            <summary>Puntos de vida del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Type">
            <summary>Tipo de Pokémon según la clase Type.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackList">
            <summary>Lista de ataques disponibles para el Pokémon, máximo de 4 ataques.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.SleepState">
            <summary>Cantidad de turnos que el Pokémon estará dormido; nulo si no está dormido.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Paralized">
            <summary>Indica si el Pokémon está paralizado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Poisoned">
            <summary>Indica si el Pokémon está envenenado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Burned">
            <summary>Indica si el Pokémon está quemado.</summary>
        </member>
        <member name="M:Poke.Clases.Pokemon.#ctor(System.String,System.Double,System.Double,System.String,Poke.Clases.Type.PokemonType)">
            <summary>
            Constructor para inicializar un Pokémon con su nombre, puntos de vida, capacidad de ataque, estado y tipo.
            </summary>
            <param name="name">Nombre del Pokémon.</param>
            <param name="health">Puntos de vida del Pokémon.</param>
            <param name="AttackCapacity">Capacidad de ataque del Pokémon.</param>
            <param name="state">Estado inicial del Pokémon.</param>
            <param name="type">Tipo del Pokémon.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.IsAlive">
            <summary>
            Verifica si el Pokémon está vivo.
            </summary>
            <returns>Mensaje indicando si el Pokémon está vivo o muerto.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.Attack(Poke.Clases.Pokemon,Poke.Clases.Pokemon,Poke.Clases.Attack)">
            <summary>
            Realiza un ataque contra otro Pokémon si tiene la capacidad para hacerlo.
            </summary>
            <param name="opponentPokemon">El Pokémon oponente a atacar.</param>
            <param name="playerPokemon">El Pokémon atacante.</param>
            <param name="attack">El ataque específico a usar.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddAttack(Poke.Clases.Attack)">
            <summary>
            Añade un ataque a la lista de ataques del Pokémon.
            </summary>
            <param name="nuevoAttack">El ataque a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.RecibeDamage(System.Double)">
            <summary>
            Aplica daño al Pokémon, reduciendo sus puntos de vida.
            </summary>
            <param name="damage">Cantidad de daño recibido.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddHP(System.Double)">
            <summary>
            Añade puntos de vida al Pokémon.
            </summary>
            <param name="hp">Cantidad de vida a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetAttacks">
            <summary>
            Obtiene la lista de ataques del Pokémon.
            </summary>
            <returns>Lista de ataques del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetType">
            <summary>
            Obtiene el tipo del Pokémon.
            </summary>
            <returns>Tipo del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetHp">
            <summary>
            Obtiene los puntos de vida del Pokémon.
            </summary>
            <returns>Puntos de vida del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.ApplyState(Poke.Clases.Pokemon,System.String)">
            <summary>
            Aplica un estado al Pokémon objetivo si no tiene ya un estado aplicado.
            </summary>
            <param name="objective">El Pokémon al que se le aplica el estado.</param>
            <param name="state">El estado a aplicar.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.TotalCureWithItem(Poke.Clases.Pokemon,Poke.Clases.Items,Poke.Clases.Trainer)">
            <summary>
            Cura totalmente al Pokémon quitándole su estado cuando se usa el ítem "CuraTotal".
            </summary>
            <param name="objective">El Pokémon objetivo.</param>
            <param name="item">El ítem usado.</param>
            <param name="player">El entrenador que posee el ítem.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.StateActualization">
            <summary>
            Actualiza los efectos de los estados del Pokémon en cada turno.
            </summary>
        </member>
        <member name="T:Poke.Clases.Trainer">
            <summary>
            Representa a un entrenador en el juego, quien tiene una lista de pokemones y una lista de items.
            </summary>
        </member>
        <member name="F:Poke.Clases.Trainer.Pokemons">
            <summary>
            Lista de pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.Trainer.ActualPokemon">
            <summary>
            El pokemon actualmente activo del entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.Trainer.Items">
            <summary>
            Lista de items que el entrenador tiene disponibles.
            </summary>
        </member>
        <member name="P:Poke.Clases.Trainer.name">
            <summary>
            Nombre del entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.Trainer.#ctor(System.String,Poke.Clases.Pokemon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Trainer"/>.
            </summary>
            <param name="name">Nombre del entrenador.</param>
            <param name="ActualPokemon">El pokemon actual del entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Trainer.PokemonLife">
            <summary>
            Calcula la vida total de todos los pokemones del entrenador.
            </summary>
            <returns>La suma de los puntos de vida de todos los pokemones.</returns>
        </member>
        <member name="M:Poke.Clases.Trainer.GetItem(Poke.Clases.Items)">
            <summary>
            Verifica si el entrenador tiene un item específico.
            </summary>
            <param name="items">El item a buscar.</param>
            <returns>Verdadero si el entrenador tiene el item; de lo contrario, falso.</returns>
        </member>
        <member name="M:Poke.Clases.Trainer.GetPokemonsInfo">
            <summary>
            Muestra la información de todos los pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.Trainer.getActualPokemon">
            <summary>
            Obtiene el pokemon actualmente activo del entrenador.
            </summary>
            <returns>El pokemon actual.</returns>
        </member>
        <member name="M:Poke.Clases.Trainer.RemoveItem(Poke.Clases.Items)">
            <summary>
            Elimina un item específico de la lista de items del entrenador.
            </summary>
            <param name="item">El item a eliminar.</param>
        </member>
        <member name="M:Poke.Clases.Trainer.useItem(Poke.Clases.Items,Poke.Clases.Pokemon)">
            <summary>
            Usa un item específico en un pokemon objetivo.
            </summary>
            <param name="item">El item a usar.</param>
            <param name="objective">El pokemon en el cual usar el item.</param>
        </member>
        <member name="T:Poke.Clases.Type">
            <summary>
            Clase estática que define los tipos de Pokémon y sus ventajas/desventajas de tipo.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.PokemonType">
            <summary>
            Enumera los tipos de Pokémon disponibles.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.TypeAdvantage">
            <summary>
            Define el tipo de ventaja en una batalla.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Advantage">
            <summary>
            Ventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Neutral">
            <summary>
            Tipo neutral.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Disadvantage">
            <summary>
            Desventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.typeAdvantages">
            <summary>
            Diccionario que contiene las combinaciones de tipos y sus respectivas ventajas.
            </summary>
        </member>
        <member name="M:Poke.Clases.Type.GetTypeAdvantage(Poke.Clases.Type.PokemonType,Poke.Clases.Type.PokemonType)">
            <summary>
            Obtiene la ventaja de tipo entre dos Pokémon.
            </summary>
            <param name="type1">Tipo del Pokémon atacante.</param>
            <param name="type2">Tipo del Pokémon defensor.</param>
            <returns>La ventaja de tipo entre los dos Pokémon (ventaja, neutral o desventaja).</returns>
        </member>
    </members>
</doc>
